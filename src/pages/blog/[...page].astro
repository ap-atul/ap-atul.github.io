---
import BlogCard from "@components/BlogCard.astro";
import Container from "@components/Container.astro";
import Pagination from "@components/Pagination.astro";
import { BLOG, SITE } from "@consts";
import PageLayout from "@layouts/PageLayout.astro";
import type { PaginateFunction } from "astro";
import { type CollectionEntry, getCollection } from "astro:content";

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const allPosts = await getCollection("blog", ({ data }) => !data.draft);
  return paginate(
    allPosts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf()),
    { pageSize: SITE.POSTS_PER_PAGE }
  );
}

const { page } = Astro.props;

const postsByYear = page.data.reduce(
  (acc: Record<string, CollectionEntry<"blog">[]>, post) => {
    const year = post.data.date.getFullYear().toString();
    (acc[year] ??= []).push(post);
    return acc;
  },
  {}
);

const years = Object.keys(postsByYear).sort(
  (a, b) => parseInt(b) - parseInt(a)
);
---

<PageLayout title={BLOG.TITLE} description={BLOG.DESCRIPTION}>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">blog</div>
      <div class="space-y-4">
        {
          years.map((year) => (
            <section class="animate space-y-4">
              <div class="text-sm font-semibold text-black dark:text-white">{year}</div>
              <div>
                <ul class="flex flex-col gap-4">
                  {postsByYear[year].map((post) => (
                    <li>
                      <BlogCard entry={post} />
                    </li>
                  ))}
                </ul>
              </div>
            </section>
          ))
        }
      </div>
    </div>
    <Pagination
      base="/blog"
      currentPage={page.currentPage}
      totalPages={page.lastPage}
    />
  </Container>
</PageLayout>
